{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n# Lesson 0: Intro to Jupyter\n\n---\n\n# What is Jupyter?\n\n- For this workshop, we will be using R via [Jupyter](https://jupyter.org/index.html)\n\n- R is the programming language that runs computations\n- Jupyter is an integrated development environment (IDE) that provides an interface by adding convenient features and tools\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Jupyter_logo.svg/1200px-Jupyter_logo.svg.png\" alt=\"jupyter logo\" align=\"left\" width=\"25%\" >\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1920px-R_logo.svg.png\" alt=\"R logo\" width=\"25%\" align=\"center\">\n---\n\n## Jupyter Notebooks\n\nNotebooks are a great tool for exploration and for documenting your workflow.\nNotebooks allow you to write:\n- Code\n- Plots\n- Formatted text\n- Latex text for equations\n\nand much more in a single document!\n\n---\n\nYou can think of Jupyter Notebooks as the dashboard of a car.\n\nYou don’t drive a car by interacting with the engine but rather by interacting with the car’s dashboard.\n\nIn the same way, rather than interacting with R directly, we will be using the Jupyter's interface.\n\nJupyter will allow us to:\n- Run R code interactively\n- Use other languages such as Python, Julia, or Matlab!\n---\nThis is what a Jupyter Notebook looks like:\n\n![screenshot JN]()\n\n---\n\n- Notebooks are great for exploration and for documenting your workflow\n- There are many options for sharing notebooks in human readable format:\n  - Share online with [nbviewer.jupyter.org](http://nbviewer.jupyter.org/)\n  - Github renders automatically any notebooks that you push.\n  - You can convert to HTML, PDF, etc. with [nbconvert](https://nbconvert.readthedocs.io/en/latest/)\n\n---\n\nThis is an example of a Code Cell\n\n```r\n# Print something\nprint(\"Hello world\", quote = FALSE)\n```\n\n```out\nHello world\n```\n\nThis is a markdown cell:\n```\nHello~!\n```\n---\n\n- Slides can have code, bullet points, tables and pretty much all other Markdown\n  elements.\n- This is another bullet point.\n\n<img src=\"profile.jpg\" alt=\"This image is in /static\" width=\"25%\">\n\nNotes: Some more notes go here\n\n---\n\n# Let's practice!\n\nNotes: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam tristique\nlibero at est congue, sed vestibulum tortor laoreet. Aenean egestas massa non\ncommodo consequat. Curabitur faucibus, sapien vitae euismod imperdiet, arcu erat\nsemper urna, in accumsan sapien dui ac mi. Pellentesque felis lorem, semper nec\nvelit nec, consectetur placerat enim.\n","fields":{"slug":"/chapter1_01_introduction"}}},{"node":{"rawMarkdownBody":"\r\n# Introduction to Generalized Additive Models\r\n\r\nNoam Ross \r\nSenior Research Scientist, EcoHealth Alliance\r\n\r\nNotes: Hi, I'm Noam Ross. I'm a scientist who studies infectious diseases. I use R and Generalized Additive Models to better understand complex biological and ecological systems. This course will teach you how to use these versatile models to analyze and understand complex, multifaceted, non-linear relationships in your own work.\r\n\r\n---\r\n\r\n# Trade-offs in Model Building\r\n\r\n![](https://github.com/noamross/gams-in-r-course/blob/master/images/tradeoff-slider.png?raw=true)\r\n\r\n\r\nNotes: Whenever we build statistical models, we face a trade-off between flexibility and interpretability. GAMs offer a middle ground between simple models, such as those we fit with linear regression, and more complex machine learning models like neural networks.\r\n\r\nLinear models are easy to interpret and to use for inference: It is easy to understand the meaning of their parameters. However, we often need to model more complex phenomena than can be represented by linear relationships.\r\n\r\nOn the other hand, machine learning models, like boosted regression trees or neural networks, can be very good at making predictions of complex relationships. The problem is that they tend to need lots of data, are quite difficult to interpret, and one can rarely make inferences from the model results.\r\n\r\nGAMs offer a middle ground: they can be fit to complex, nonlinear relationships and make good predictions in these cases, but we are still able to do inferential statistics and understand and explain the underlying structure of our models and why they make predictions that they do.\r\n\r\n---\r\n\r\n# Non-linear Relationships\r\n\r\n![](https://github.com/noamross/gams-in-r-course/blob/master/images/nonlinear-scatter-1.png?raw=true)\r\n\r\nNotes: GAMs let us flexibly model non-linear relationships. Here I've made a scatter plot of two variables, X and Y. We can see from the scatterplot that there is clearly some relationship between the variables, but it is not linear.\r\n\r\n---\r\n\r\n# Non-linear Relationships (2)\r\n\r\n```r\r\nlinear_mod <- lm(y ~ x, data = my_data)\r\n```\r\n\r\n![](https://github.com/noamross/gams-in-r-course/blob/master/images/nonlinear-scatter-lm-1.png?raw=true)\r\n\r\nNotes: If we fit a linear model to the data using the lm() function and the usual formula syntax, we can see it won't do a very good job. The model doesn't capture key aspects of this relationship.\r\n\r\n---\r\n\r\n# Non-linear Relationships (3)\r\n\r\n```{r}\r\nlibrary(mgcv)\r\ngam_mod <- gam(y ~ s(x), data = my_data)\r\n```\r\n\r\n![](https://github.com/noamross/gams-in-r-course/blob/master/images/nonlinear-scatter-gam-1.png?raw=true)\r\n\r\nNotes: With a GAM, however, we can fit data with smooths, or splines, which are functions that can take on a wide variety of shapes. \r\nWe fit a GAM using the gam() function from the mgcv package. \r\nHere, when we fit this GAM, we wrap the independent variable, x, in the s(), that is smooth function to specify that we want this relationship to be flexible.\r\nA GAM can capture the nonlinear aspects of not only this relationship, but of many nonlinear relationships, because of the flexibility of splines.\r\n\r\n---\r\n\r\n# Basis Functions\r\n\r\n![](https://github.com/noamross/gams-in-r-course/blob/master/images/basis-functions-1.png?raw=true)\r\n\r\nNotes: The flexible smooths in GAMs are actually constructed of many smaller functions. These are called basis functions. Each smooth is the sum of a number of basis functions, and each basis function is multiplied by a coefficient, each of which is a parameter in the model. In the plot here on the left, we show the basis functions of a GAM where all the coefficients are the same. On the right, we show the same basis functions after model-fitting, where each has a coefficient fit to the data. You can see how these basis functions add up to create the overall smooth shape. So a single nonlinear relationship between a dependent and independent variable has several parameters, plus an intercept. This is different, and more complex, than a linear model, where each variable has only a single coefficient or parameter.\r\n\r\n---\r\n\r\n# Basis Functions (2)\r\n\r\n```{r}\r\ngam_mod <- gam(y ~ s(x), data = my_data)\r\n\r\ncoef(gam_mod)\r\n\r\n(Intercept)     s(x2).1     s(x2).2    \r\n7.814448        5.272290    5.104941\r\n     \r\ns(x2).3         s(x2).4     s(x2).5\r\n1.271135        1.720561   -1.180613 \r\n     \r\ns(x2).6 \r\n-2.676133\r\n```\r\n\r\nNotes: When we fit a GAM with R, we can extract the coefficients just like we can for linear models using the coef() function.  Calling this function on a GAM model object will show the coefficients of each of the basis functions of the model.  You can see that even a simple one-smooth model has many coefficients.\r\n","fields":{"slug":"/chapter1_01_introduction 2"}}},{"node":{"rawMarkdownBody":"\n# Basis Functions and Smoothing\n\nNoam Ross\nSenior Research Scientist, EcoHealth Alliance\n\nNotes: Now that you have a sense of how GAMs can fit nonlinear data, let's learn a bit more about how they work. GAMs are powerful because of their ability to take on many shapes, but this is also what makes them challenging. Their flexibility makes it easy to over-fit your data. Here we'll learn how smoothing helps us deal with this issue.\n\n---\n\n# Getting the right fit\n\n![](https://github.com/noamross/gams-in-r-course/blob/master/images/thin-gam-fit-1.png?raw=true)\n\n-  Close to the data (avoiding under-fitting)\n-  Not fitting the noise (avoiding over-fitting)\n\nNotes: In general, we want to balance two things when fitting a nonlinear model.  We want a model that captures the relationship by being close to the data, but we also want to avoid fitting our model to noise, or over-fitting.\n\n---\n\n# Balancing Wiggliness\n\n![](https://github.com/noamross/gams-in-r-course/blob/master/images/formula1-chapter1.png?raw=true)\n\nNotes: How well the GAM captures patterns in the data is measured by a term called likelihood.  Its complexity, or how much the curve changes shape, is measured by wiggliness. The key to a good fit is the trade-off between the two. This trade-off is expressed by this simple equation, with a smoothing parameter, or lambda value, controlling the balance. This smoothing parameter is optimized when R fits a GAM to data.\n\n---\n\n# Choosing the Right Smoothing Parameter\n\n![](https://github.com/noamross/gams-in-r-course/blob/master/images/diffsmooth-1.png?raw=true)\n\nNotes: Here are plots of three GAMs with different smoothing, or lambda values.  As you can see, the one on the left smooths too much, creating a straight line through curved data.  The one in the middle smooths too little, fitting noise rather than the trend.  The one on the right is just right. It's lambda value balances over-and-under-fitting.\n\n---\n\n# Smoothing Syntax\n\nSetting a fixed smoothing parameter\n\n```r\ngam(y ~ s(x), data = dat, sp = 0.1)\ngam(y ~ s(x, sp = 0.1), data = dat)\n```\nSmoothing via restricted maximum likelihood\n\n```r\ngam(y ~ s(x), data = dat, method = \"REML\")\n```\n\nNotes: Normally when we fit a model with mgcv's gam() function, we let the package do the work of selecting a smoothing parameter.  However, we can fix the smoothing parameter to a value of our choosing via the sp argument.  The sp argument can be set for the whole model via an argument to the gam() function, as in the first line of code.  We can also set the sp argument for a specific term in the GAM formula, as shown in the second line of code.\n\nInstead if we allow R to do this work for us, the mgcv package offers several different methods for selecting smoothing parameters.  I, and most GAM experts, strongly recommend that you fit models with the REML, or \"Restricted Maximum Likelihood\" method.  While different methods have their advantages, REML is most likely to give you reliable, stable results. \n\n---\n\n# Number of basis functions\n\n![](https://github.com/noamross/gams-in-r-course/blob/master/images/diffbasis-1.png?raw=true)\n\nNotes: In addition to the smoothing parameter, the other factor that affects how wiggly a GAM function can be is the number of basis functions that make up a smooth function.  Here I've plotted GAMs with 3, 7, and 12 basis functions all fit to the same data.\n\nAs you can see, a smooth with a small number of basis functions is limited in its wiggliness, while one with many basis functions is capable of capturing finer patterns.\n\n---\n\n# Basis Function Syntax\n\nSetting number of basis functions\n\n```r\ngam(y ~ s(x, k = 3), data = dat, method = \"REML\")\n    \ngam(y ~ s(x, k = 10), data = dat, method = \"REML\")\n```\n\nUse the defaults\n\n```r\ngam(y ~ s(x), data = dat, method = \"REML\")\n```\n\nNotes: To set the number of basis functions in a smooth, we use the k argument in the smooth function in a GAM formula.  Setting this value too low will prevent the model from being sufficiently wiggly.  If it's high, though, the automatic smoothing parameter selection will prevent it from being too wiggly. We just don't want to set it very high, which can result in a model with more parameters than data, or one that is slow to fit.\n\nLater, in the model testing portion of the course, we will learn how to test if the number of basis functions are adequate to fit our data.\n","fields":{"slug":"/chapter1_05"}}}]}}}
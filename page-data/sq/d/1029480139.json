{"data":{"site":{"siteMetadata":{"testTemplate":"success <- function(text) {\n    cat(paste(\"\\033[32m\", text, \"\\033[0m\", sep = \"\"))\n}\n\n.solution <- \"${solutionEscaped}\"\n\n${solution}\n\n${test}\ntryCatch({\n    test()\n}, error = function(e) {\n    cat(paste(\"\\033[31m\", e[1], \"\\033[0m\", sep = \"\"))\n})","juniper":{"repo":"LinkedEarth/RLeapFROGS","branch":"binder","kernelType":"ir","lang":"r","debug":true}}},"allCode":{"edges":[{"node":{"name":"exc_02_01","code":"1+1\n\nsqrt(16)\n\n3 * pi\n"}},{"node":{"name":"exc_02_02","code":"is.numeric(2.234)\n\nis.numeric(2)\n\nis.integer(2)\n\nas.integer(\"5\")\n\nis.integer(as.integer(\"5\"))\n\nclass(2)\n\nclass(\"2\")\n"}},{"node":{"name":"exc_02_03","code":"a <- \"c\"\nb <- \"a\"\nc <- \"t\"\nd <- c(a,b,c)\n\nd\n\nlength(d)\n"}},{"node":{"name":"exc_02_04","code":"substring(\"hello\",1,3)\n\ntext1 <- \"hello\"\ntext1 <- substring(text1,1,3)\ntext1\n\nfirstLetter <- function(string){\n  string <- substring(string,1,1)\n  return(string)\n}\n\nfirstLetter(\"alphabet\")\n"}},{"node":{"name":"exc_03_01","code":"class(iris)\n\ndim(iris)\n\nhead(iris)\n\nsummary(iris)\n\nplot(iris)\n"}},{"node":{"name":"exc_02_06","code":"#extract first letter of a string or its posiion in the alphabet\nfirstLetter <- function(string,place=FALSE){\n  #get the first letter\n  string <- substring(string,1,1)\n  if(place){\n    #return the position instead of the letter itself\n    string <- which(letters==tolower(string))#since the vector 'letters' is all lowercase, we have to run tolower() on our first letter to ensure we find a match\n    }\n  return(string)\n}\n\n#test run, should output 'z'\nfirstLetter(\"zebra\")\n"}},{"node":{"name":"exc_03_02","code":"iris[1:10,]\n\niris[,1]\n\niris[1:10,1]\n\niris[iris$Sepal.Length < 4.9 & iris$Sepal.Width > 2.8, 5]\n"}},{"node":{"name":"exc_03_03","code":"suppressMessages(library(dplyr))\n\nslice(iris,1:10)\n\nselect(iris,Sepal.Length)\n\niris %>% \n  slice(1:10) %>% \n  select(Sepal.Length)\n\niris %>% \n  filter(iris$Sepal.Length < 4.9 & iris$Sepal.Width > 2.8) %>%\n  select(Species)\n"}},{"node":{"name":"exc_02_05","code":"firstLetter <- function(string,place=FALSE){\n  string <- substring(string,1,1)\n  if(place){\n    string <- which(letters==tolower(string))\n    }\n  return(string)\n}\n\nfirstLetter(\"zebra\", place=TRUE)\n\nfirstLetter(\"zebra\")\n"}},{"node":{"name":"exc_03_04","code":"suppressMessages(library(dplyr))\n\niris %>%\n  filter(iris$Sepal.Length < 4.9) %>%\n  mutate(Petal.Width.Exp = log(Petal.Width)) %>%\n  arrange(desc(Sepal.Width), .by_group = TRUE) %>%\n  select(Sepal.Width, Petal.Width.Exp, Species)\n\n"}},{"node":{"name":"exc_04_01","code":"suppressMessages(library(ggplot2))\n\nggplot(data = iris, mapping = aes(x=Sepal.Width, y=Petal.Length, color=Species)) +\n  geom_point()\n"}},{"node":{"name":"exc_03_05","code":"suppressMessages(library(tidyverse))\n\niris <- tibble(iris)\n\niris\n\niris.Sepal <- iris %>%\n  select(Sepal.Length, Sepal.Width, Species) %>%\n  nest(Sepal.Lengths = Sepal.Length, Sepal.Widths = Sepal.Width)\n\niris.Sepal\n"}},{"node":{"name":"exc_04_02","code":"suppressMessages(library(astrochron))\nsuppressMessages(library(tidyverse))\n\n#set seed (for reproducibility)\nset.seed(599)\n\n#generate a time series using the default parameters\nts1 <- armaGen(npts = 500, rhos=c(0.9), m = 0, std = 1, verbose = FALSE, genplot = FALSE)\n\n#add a second time series as ts1 plus noice\ndf1 <- ts1 %>%\n  mutate(V3 = V2 + rnorm(n=500,mean=0, sd=1))\n\n#rename the columns and look at the data frame\ncolnames(df1) <- c(\"Time\",\"A\", \"B\")\nhead(df1)\nseries_cor <- cor(df1$A, df1$B)\n\n#Reorganize the data frame in long format for ggplot\ndf2 <- df1 %>%\n  gather(key=\"Series\", value = \"Value\", A, B)\nhead(df2)\n\n#initial plot\nggplot(data = df2, mapping = aes(x=Time, y=Value, color=Series)) +\n  geom_line()\n\n"}},{"node":{"name":"exc_04_03","code":"suppressMessages(library(tidyverse))\n  \n#load df2 from last exercise\ndf2 <- read.csv(\"https://raw.githubusercontent.com/LinkedEarth/RLeapFROGS/main/public/module2/module2_df2.csv\")\n\n#grab vectors for summary stats\nvec_A <- df2 %>% filter(Series == \"A\") %>% pull(Value)\nvec_B <- df2 %>% filter(Series == \"B\") %>% pull(Value)\n\n#calculate summary stats for plot labels\n##correlation\nseries_cor <- cor(vec_A, vec_B)\n##some of this may look confusing. We are using the function 'sd()' iside of the function round. The innermost function always runs first\nsd_A <- round(sd(vec_A), 2)\nsd_B <- round(sd(vec_B), 2)\n##Note here that the 'acf()' function returns a list. We use the '$' operator to extract one part of that list and take the second value from the resulting vector of autocorrelations\nAR1_A <- round(acf(vec_A, plot = FALSE)$acf[2], 2)\nAR1_B <- round(acf(vec_B, plot = FALSE)$acf[2], 2)\n\n#organize stat labels\nstat_labels <- paste0(paste0(\"SD = \", c(sd_A, sd_B), \", \"),\n                      paste0(\"AR1 = \", c(AR1_A, AR1_B)))\nts_labs <- data.frame(\"Series\" = c(\"A\",\"B\"),\n                      \"label\" = stat_labels)\n\nfinal_title <- paste0(\"Original Series A and noise-added Series B with correlation r = \", round(series_cor,2))\n\n#build new plot\nggplot(data = df2, mapping = aes(x=Time, y=Value)) +\n  geom_line() +\n  theme_classic() +\n  facet_wrap(~Series,ncol = 1) +\n  geom_label(data = ts_labs, mapping=aes(x=-Inf, y=-Inf, vjust=0.0, hjust=0.0, label = label)) +\n  ggtitle(final_title)\n"}},{"node":{"name":"exc_04_04","code":"#load libraries\nsuppressMessages(library(mapproj))\nsuppressMessages(library(maps))\nsuppressMessages(library(tidyverse))\n\nearthquakes = read.csv(\"https://raw.githubusercontent.com/LinkedEarth/RLeapFROGS/binder/public/module2/recent_earthquakes.csv\")\n\nworld_map = map_data(\"world\") %>% \n  filter(! long > 180)\n\ncountries = world_map %>%\n  distinct(region) %>%\n  rowid_to_column()\n\ncountries %>%\n  ggplot(aes(map_id = region)) +\n  geom_map(map = world_map) +\n  expand_limits(x = world_map$long, y = world_map$lat) +\n  coord_map(\"moll\") +\n  geom_point(data=earthquakes, mapping = aes(x=longitude, y=latitude, color=mag, size=mag),inherit.aes = FALSE) +\n  scale_colour_gradient(low = \"#808080\", high = \"#FF0000\") +\n  theme(legend.position = \"bottom\") +\n  ggtitle(\"Earthquakes above magnitude 2.5, 23 April 2024 - 22 May, 2024\")\n"}}]}}}
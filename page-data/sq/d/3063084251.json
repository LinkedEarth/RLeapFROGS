{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n<div><h1>Author Checklist:<br>Publishing your data</h1></div>\n\n---\n\n<h2> Identify a publicly accessible repository for your data </h2>\n\nThis could be a general, non-curated repository such as Figshare or a curated, domain-specific one such Pangaea or Hydroshare. \n\n<h3>Why is this important? </h3>\n\nSharing your data in publically accessible repository enables other (and yourself) researchers to use your original data for reprocublity and replicability studies or extend your findings. \n\n---\n\n<h2> Fill out the needed metadata, including the license </h2>\n\nMost repositories will guide you through the process, including any specific mandatory fields.  \n\nDon't forget to add a license. Here is a quick guide about commonly-used licenses: https://chooser-beta.creativecommons.org \n\n<h3>Why is this important? </h3>\n\nAdding the proper metadata ensures maximum reuse of your data in other studies. \n\nLicenses indicate the terms and conditions under which your data can be used. Make sure that you choose a license appropriate given the funding agency. \n\n---\n\n<h2> Upload the data </h2>\n\nIf you are working with large datasets, make sure that the repository can accommodate them. For instance, Figshare only allows files with a maximum size of 20GB. \n\n---\n\n<h2> Enable citation of the data </h2>\n\nThe citation should include a unique persistent identifier for the data. \n\n<h3>Why is this important? </h3>\n\nCitations help you get recognized for all of your work. Additionaly, it is an integral part of reproducibility since it can give information about the provenance of the data. \n\n---\n\n<h2> Citing  Data in your paper </h2>\n\n- Citation goes in the references section\n- Guidelines on how to cite data are often set by the journal but includes an in-text pointer as you would cite any other paper (recommended), an in-text pointer in a Data Resources section, an in-text pointer in the \"Acknowledgements\" section. \n\n---\n\n","fields":{"slug":"/chapter4_01_data"}}},{"node":{"rawMarkdownBody":"\n<div><h1>Author Checklist:<br>Publishing your workflow</h1></div>\n\n---\n\n<h2> Identify a publicly accessible repository</h2>\n\nIf your workflow is sketched but you are not planning to provide an executable version, the best option is Figshare or Zenodo and treat the sketch as data.\n\nIf you are planning to provide an executable workflow, several options are available:\n1. Provide an electronic Notebook. Make sure to indicate any manual steps in the text narrative of the notebook.\n2. Provide a series of scripts. In this case, make sure you have a \"read me\" file that describes in which order to execute and what are the expected output of each script. \nIn both cases, a sketch of the workflow could still be useful and should be shared in the same repository as the executable workflow. There are several options but a popular one is Github, which allows for many developers to work together and has verion control.\n\n<h3>Why is this important? </h3>\n\nSharing your workflow in publically accessible repository enables other (and yourself) researchers to use your original workflow for reprocublity and replicability studies or apply it to other studies. \n\nVersion control allows to easily track changes in the workflow (made by you or other collaborators), and rolls back to a prior stable version if needed or runs continous integration to ensure that introduced changes are still giving proper results. Many platforms, including GitHub, provide other collaboration tools such as issue tracker and project management tools that you will learn to use in subsequent modules. \n\n---\n\n<h2> Provide enough metadata for reuse, including a licence and your conmputational environment </h2>\n \nTo share your computational environment, you can either list the libraries in a \"read me\" file. \n\n<h3>Why is this important? </h3>\n\nThe license identifies the rules and conditions under which your workflow can be reused by others. Some of the most used licences for open-source project are the Apache 2.0 and MIT licenses. These licenses are permissive, meaning that they have few restrictions to allow others to reuse your work. You can use this website to help you choose a license: https://choosealicense.com.\n\nIf you are using GitHub, use the following to add a license to your repository: https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-license-to-a-repository \n\nIn the case of executable workflows, sharing your computational environment, and in particular the version of the packages, is critical to long-term reproducbility. Five years from now, a particular library could change its default behavior, resulting in differing results.\n\n---\n\n<h2> [Optional] Making your workflow executable</h2>\n\nFor full reproducibility, you may want to consider sharing your workflow in a Docker container or through Binder (e.g., you can use myBinder)\n\n<h3>Why is this important? </h3>\n\nBuilding environment from a list of libraries may become tricky a few years from when the workflow was created. Docker containers make it easier for others to reproduce your work.  \n\n\n---\n\n<h2> Enable citation of the workflow</h2>\n\nThe citation should include a unique persistent identifier for the workflow. If using a sketch publicly available on a general-purpose repository such as Figshare, you will obtain a permanent unique identifier from them.  Most software repositories (including GitHub), which might be more appropriate for executable workflows, do not mint DOIs directly. One option is to link your GitHub repository to Zenodo to obtain a DOI for each version of your workflow upon release. \n\nIn most cases, you will have to provide a citation for your workflow. To do so, you can use CodeMeta (https://codemeta.github.io/) and the Citation File Format (https://citation-file-format.github.io/). In each case, a plain text file (CITATION.cff) is added to your repository. When you link your GitHub repository with Zenodo, the content of the CITATION.cff file is used to generate the citation in combination with the minted DOI from Zenodo. \n\n<h3>Why is this important? </h3>\n\nCitation helps you get credit for all of your research. \n\n---\n\n<h2> Citing the workflow in your paper </h2>\n\nIf using a sketch for your workflow, you can include the figure directly into the manusctipt in the methods section or in supplementary information. \n\nFor executable workflows, you can treat it as software:\n- Citation goes in the references section\n- Guidelines on how to cite software are often set by the journal but includes an in-text pointer as you would cite any other paper (recommended), an in-text pointer in a \"Data Resources\" or \"Open Science\" section, an in-text pointer in the \"Acknowledgements\" section. \n\nYou may combine sketch and executable workflows to ensure that your study is reproducible. \n\n---\n\n","fields":{"slug":"/chapter4_03_workflow"}}},{"node":{"rawMarkdownBody":"\n<div><h1>Author Checklist:<br>Publishing your software</h1></div>\n\n---\n\n<h2> Identify a publicly accessible repository with version control </h2>\n\nThere are several options but a popular one is Github, which allows for many developers to work together and has verion control. \n\n<h3>Why is this important? </h3>\n\nSharing your software in publically accessible repository enables other (and yourself) researchers to use your original software for reprocublity and replicability studies or apply it to other studies. \n\nVersion control allows to easily track changes in the software (made by you or other collaborators), and rolls back to a prior stable version if needed or runs continous integration to ensure that introduced changes are still giving proper results. Many platforms, including GitHub, provide other collaboration tools such as issue tracker and project management tools that you will learn to use in subsequent modules. \n\n---\n\n<h2> Provide enough metadata for reuse, including a licence </h2>\n\n<h3>Why is this important? </h3>\n\nThe license identifies the rules and conditions under which your software can be reused by others.  \n\nSome of the most used licences for open-source project are the Apache 2.0 and MIT licenses. These licenses are permissive, meaning that they have few restrictions to allow others to reuse your work. You can use this website to help you choose a license: https://choosealicense.com.\n\nIf you are using GitHub, use the following to add a license to your repository: https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-license-to-a-repository \n\n---\n\n<h2> Register your code in a community registry </h2>\n\nSome registries are language specific (e.g., PyPi for Python and CRAN for R). Others are cross-language, but may be dedicated to a scientific domain (e.g., Hydroshare, DesignSafe)\n\n<h3>Why is this important? </h3>\n\nThe registry provides more visibility for your work by adding metadata to your package. In some instances, it makes it easier to install your package. \n\n\n---\n\n<h2> Enable citation of the Software </h2>\n\nThe citation should include a unique persistent identifier for the software. Most software repositories (including GitHub) do not mint DOIs directly. One option is to link your GitHub repository to Zenodo to obtain a DOI for each version of your software upon release. \n\nIn most cases, you will have to provide a citation for your software. To do so, you can use CodeMeta (https://codemeta.github.io/) and the Citation File Format (https://citation-file-format.github.io/). In each case, a plain text file (CITATION.cff) is added to your repository. When you link your GitHub repository with Zenodo, the content of the CITATION.cff file is used to generate the citation in combination with the minted DOI from Zenodo. \n\n<h3>Why is this important? </h3>\n\nCitation helps you get credit for all of your research. More cricitally, software citation should always include a version of the software used in the work for reproducibility. \n\n---\n\n<h2> Citing  software in your paper </h2>\n\n- Citation goes in the references section\n- Guidelines on how to cite software are often set by the journal but includes an in-text pointer as you would cite any other paper (recommended), an in-text pointer in a \"Data Resources\" or \"Open Science\" section, an in-text pointer in the \"Acknowledgements\" section. \n\n---\n\n","fields":{"slug":"/chapter4_02_software"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://foundations.projectpythia.org/_images/GitHub-logo.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/> Lesson 1<br>Git and GitHub</h1></div>\n\n---\n# Git\n\nGit is a distributed version control system that helps developers track and manage changes in their codebase. Here's a breakdown:\n\n* Version Control: Git keeps a history of changes made to files, allowing developers to revert to previous versions, collaborate with others, and handle multiple versions of a project.\n* Distributed System: Unlike centralized version control systems, Git allows every developer to have a full copy of the repository, making it robust and ideal for collaborative work.\n* Key Features:\n  * Branching and merging: Developers can work on separate branches and merge changes seamlessly.\n  * Speed and efficiency: Operations like commits, diffs, and merges are fast.\n  * Offline capability: Most tasks can be done without an internet connection.\n\n\n---\n\n# GitHub\n\nGitHub is a web-based platform built on top of Git, providing additional features for collaboration and project management. It allows developers to host and manage Git repositories in the cloud. \n\n* Integration with CI/CD Tools: Automate testing, building, and deployment pipelines.\n* GitHub Pages: Host static websites directly from a repository.\n* Code Hosting: GitHub stores your code in repositories and makes it accessible to collaborators or the public.\n* Collaboration Tools:\n  * Pull requests: Suggest and review code changes.\n  * Issue tracking: Manage bugs, feature requests, and tasks.\n  * Project boards: Organize and prioritize work visually.\n* Social and Community Features:\n  * Forking: Clone repositories to create your version.\n  * Stars: Bookmark repositories you find useful.\n  * Discussions: Communicate and share knowledge within the community.\n\n[Pythia - What is GitHub?](https://foundations.projectpythia.org/foundations/github/what-is-github.html)      \n\n---\n\n## Git vs. GitHub\n\n* Git: A tool for version control and code management.\n* GitHub: A web-based platform that uses Git while adding collaboration, hosting, and project management features.\n* GitHub Desktop: a free, user-friendly application that provides a graphical interface for working with Git and GitHub.\n\nThey are often used together, but GitHub is just one of several services (like GitLab and Bitbucket) that can host Git repositories.\n\n","fields":{"slug":"/chapter5_01_git_and_github"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://foundations.projectpythia.org/_images/GitHub-logo.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/> Lesson 2<br>Introduction to GitHub</h1></div>\n\n---\n\n## Github\n\nThis lesson will introduce the functions of GitHub, the de facto standard platform for collaboration and version control used by the open-source coding community.\n\nFirst, let's create an account.\n\n---\n\n## Setting up a GitHub account\n\n<div><h1><img src=\"https://github.com/LinkedEarth/RLeapFROGS/blob/main/static/module5/github_signup.png?raw=true\" alt=\"GitHub Logo\" width=25% align=\"left\"/></h1></div>\n\nSigning up for a new GitHub account is simple and free. After signing up you can create a new repository and try some of the features outlined in this lesson.\n\nThe linked tutorial will guide you through some of the more advanced components of a GitHub account.\n\n[Account setup tutorial from Project Pythia](https://foundations.projectpythia.org/foundations/github/github-setup-advanced.html)\n\n\n---\n\n## What is a repository?\n\n<div><h1><img src=\"https://docs.github.com/assets/cb-29762/images/help/repository/repo-create-global-nav-update.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/></h1></div>\n\nA repository (repo) is a web-hosted file directory. A repo can be public or private and can have multiple collaborators. Repos are typically used to house coding projects, but they can also be used to store other types of files.\n\nSome possible uses:\n\n* Share a scientific workflow\n* Publish a website\n* Collaborate on a coding project\n  * Track changes\n  * Assign tasks\n  * Maintain production and development versions simulateously and merge when appropriate\n\nAdditional resources: [Pythia - What is a GitHub Repository?](https://foundations.projectpythia.org/foundations/github/github-repos.html)\n\n---\n## Issues and Discussions\n\n### Issues\n\nA GitHub Issue is a note in a repository that describes a bug, suggests a new feature, or offers general feedback. Issues can be submitted by repository owners/collaborators to track tasks or by outside users with questions/suggestions.\n\n---\n\n### New and exisitng Issues\n\n* When planning to write a new issue, be sure to review existing Issues first\n  * Reading existing Issue posts may provide more context for your question/suggestion\n  * Search key terms (see image below)\n  * Upvote existing Issue that covers your bug/feature request\n* Only after careful review of existing Issues should you post a new Issue (see next slide)\n\n<div><h1><img src=\"https://github.com/LinkedEarth/LeapFROGS/blob/version/static/module5/GitHub_issues_search.PNG?raw=true\" alt=\"Issues search1\" width=25% align=\"left\"/></h1></div>\n\n---\n\n**Creating an Issue**\n\n1. Go to the Issues tab.\n2. Click New Issue.\n3. Fill in:\n  * Title: Short description of the task.\n  * Body: Detailed description, including context or instructions.\n  * Labels: Use labels like \"bug,\" \"enhancement,\" \"help wanted.\"\n  * Assignees: Assign team members responsible for the issue. You can also assign yourself!\n4. Click Submit New Issue.\n\n---\n\n### Writing a good issue\n\nA bug report should consist of a reproducible example. Some repositories include [issue templates](https://github.com/stevemao/github-issue-templates?tab=readme-ov-file), which generally include space for <em>Expected Behavior</em>, <em>Actual Behavior</em>, <em>Steps to Reproduce the Problem</em>, and <em>Specifications (Version, Platform, Subsystem)</em>. Here's an example of a [well written issue](https://github.com/LinkedEarth/Pyleoclim_util/issues/469). Writing issues in this way makes reproducing problems (or misperceptions of problems) straightforward. This allows for smooth communication with the repository maintainers and greatly improves your chances of resolving your problems.\n\n[More on Issues from project Pythia](https://foundations.projectpythia.org/foundations/github/github-issues.html).\n\n---\n\n### Using Labels for Organizations\n\nLabels help categorize tasks. Common examples:\n\n* Bug: For errors or problems.\n* Enhancement: For new features or improvements.\n* Documentation: For writing or updating guides.\n* High Priority: For urgent tasks.\n\n#### How to Add Labels\n\n1. Go to the Issues or Pull Requests tab.\n2. Click an issue or pull request.\n3. In the right sidebar, click Labels and select or create a label.\n\n---\n\n## Discussions\n\nGitHub Discussions provide a more open-ended forum for community engagement. A discussion topic is an open space for conversations such as steering project directions, eliciting community feedback, or offering notes on a new release.\n\n[More on Discussions from GitHub](https://resources.github.com/devops/process/planning/discussions/)\n\n---\n## Cloning and Forking\n\nMaking a copy of a public repository can be useful in many circumstances. There are two ways to do this: <em>Clonin</em>g and <em>Forking</em>.\n\n---\n\n### Cloning\n\n<div><h1><img src=\"https://docs.github.com/assets/cb-60499/images/help/repository/https-url-clone-cli.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/></h1></div>\n\nCloning a repository creates your own copy, <strong>independent</strong> of the original repo. This method is ideal for creating your own project, using an existing repo as the starting point.\n\n\nA few use cases:\n\n* Reproducing a scientific workflow\n* Using the structure of a repo wherein you will infill the content\n  * A website\n  * A code library (R, Python, etc.)\n\n---\n\n### Forking\n<div><h1><img src=\"https://user-images.githubusercontent.com/17777237/54873012-40fa5b00-4dd6-11e9-98e0-cc436426c720.png\" alt=\"GitHub Logo\" width=15% align=\"left\"/></h1></div>\n\nForking a repo creates a copy that will track the original. This method is primarily used for making changes to the original repo by users without direct access. This is accomplished by a pull request, which is covered in the next module.\n\n[Clong and Forking from project Pythia](https://foundations.projectpythia.org/foundations/github/github-cloning-forking.html)\n","fields":{"slug":"/chapter5_02_intro_github"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://foundations.projectpythia.org/_images/GitHub-logo.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/> Lesson 3<br>Intermediate GitHub</h1></div>\n\n---\n\nNow that you set up your GitHub account, it is time to start collaborating.\n\nLearn about branches, pull requests, and version control systems.\n\n---\n\n## Version control and GitHub releases - an Overview\n\nBefore we delve into the specifics of how version tracking is implemented on the GitHub platform, let's first talk about why we need version control. Version control is essential for scientists because it keeps a detailed history of changes made to files, enabling researchers to track their progress, collaborate effectively, and ensure the reproducibility of their work. It allows multiple people to work on the same project without overwriting each other’s contributions and provides the ability to revert to earlier versions if mistakes occur. By organizing and preserving every step of the research process, version control ensures transparency and prevents the loss of critical data or code.\n\nOnce in a while, one might want to capture a snapshot of the project. These snapshots are called **releases**. For instance, a release could correspond to the publication of a manuscript. This is actually how you should think about a release: a published paper with version control as the editing process leading up to it. \n\n**Why Should Scientists Care?**\n\n1. Transparency: Share your data, code, and analyses openly.\n2. Collaboration: Allow others to build on your work.\n3. Reproducibility: Ensure your results can be replicated.\n4. Organization: Always have access to past versions.\n\n---\n\n## Version Control in GitHub\n\nVersion control helps track changes to your files over time. It ensures you can:\n\n* Keep a record of every change (what, when, and why it was made).\n* Work collaboratively without overwriting others’ work, using `branches` and by creating `pull requests`.\n* Revert to earlier versions if something goes wrong.\n* Think of it as the “track changes” feature in Word, but for any type of file.\n\n**How does GitHub help with version control?**\n\nGitHub provides a centralized platform to:\n\n* Store your project (called a repository).\n* Track every version and change you make (called `commits`).\n* Share your project with collaborators or the public.\n\nTo learn more about version control and different implementations, read [this article](https://github.com/resources/articles/software-development/what-is-version-control).\n\nA detailed description of version control with git (and how it relates to GitHub) can be found [on the Project Pythia's website](https://foundations.projectpythia.org/foundations/github/basic-git.html).\n\n---\n\n### Tips for Scientists Using Version Control\n\n* Always write clear commit messages to explain changes.\n* Use branches for new experiments or major changes.\n* Regularly commit your work to keep track of progress.\n\n---\n\n## What are GitHub releases?\n\nA release is like taking a “snapshot” of your project at a specific point in time.\n* It’s a way to package and share finalized work (e.g., datasets, analyses, or software).\n* You can attach files (like datasets or PDFs) to the release.\n* Releases are versioned (e.g., v1.0, v1.1, v2.0) so others know which is the latest or most stable version.\n\nIt is useful to decide on (1) when to release a new version, and (2) the numbering of the version. Most often, you will see two conventions:\n* x.y.z where x consists of a major release which may result in code breakage as the way the program is called (referred to as an API or application programming interface) is changed (e.g., replacing the name of a parameter); y consists of additional capabilities, and z is used to indicate bug fixes.\n* mm.yyyy which relates to the month and year the software is published. \nIn both of these cases, it is useful to link the GitHub releases to Zenodo releases \n\n---\n\n### Creating a new release on GitHub\n\n1. Navigate to your GitHub repository.\n2. Click Releases > Draft a new release.\n3. Fill out the form:\n    * Tag version: Use semantic versioning as described in the previous slide.\n    * Release title: Provide a descriptive name (e.g., \"Initial Dataset Release\").\n    * Click on `Generate Release Notes` so GitHub automatically populate the description with a history of the versions. \n    * Description: List key changes or features (e.g., \"Includes raw data and analysis scripts for the 2023 project\").\n    * Attach relevant files (e.g., datasets, README.pdf). \n4. Click Publish Release.\n\n---\n\n## Branches\n\nBranches in version control are like parallel workspaces within a project. They allow you to make changes or try out new ideas without affecting the main project (usually called the main or master branch). Each branch starts as a copy of the main project but can be edited independently.\n\n**How to Use Branches**\n1. Experimentation: Use branches to test new methods, analyze datasets, or add features without impacting the stable version of your work.\n2. Collaboration: Team members can work on their own branches, making it easy to merge their contributions later.\n3. Bug Fixes or Updates: Fix an issue or add a new feature in a branch while keeping the main project stable.\nWhen your changes are ready, you can merge the branch back into the main project, ensuring all updates are integrated without disrupting others’ work. Branches help organize work and make collaboration seamless in scientific projects.\n\nAn introduction on how git branches can be found on the [Project Pythia's website](https://foundations.projectpythia.org/foundations/github/git-branches.html). The following slide demonstrates how to use branches on the GitHub platform\n\n---\n\n### Creating a Branch on GitHub\n\n<div><img src=\"https://github.com/LinkedEarth/LeapFROGS/blob/main/static/module5/branches.png?raw=true\" alt=\"GitHub branches\" width=25% align=\"left\"/></div>\n\n1. Go to Your Repository\n    * Log in to GitHub and navigate to the repository where you want to create a branch.\n2. Locate the Branch Dropdown\n    * At the top-left of the repository page, you’ll see a dropdown menu with the name of the current branch (e.g., `main` or `master`).\n3. Create a New Branch\n    * Click the dropdown.\n    * In the search bar at the top of the dropdown, type a name for your new branch (e.g., `experiment-1` or `bug-fix`).\n    * Select Create branch: [branch name] from the dropdown.\n4. Switch to the New Branch\n    * Once created, GitHub will automatically switch to your new branch.\n    * You can confirm this by checking the branch name at the top-left of the repository page.\n\n**Pro Tips:** Use clear and descriptive names for branches (e.g., `data-cleaning`, `add-new-figure`, `update-analysis) and regularly merge changes from the main branch into your branch to keep it up to date.\n\n---\n\n### Using the New Branch\nAny changes you make will now be saved to this branch, keeping the main branch unchanged.\n\nYou can edit files directly on GitHub or upload new ones to this branch.\n\n---\n\n## Pull Request\n\nAfter you have forked a repo or created a new branch into your own repository, you are free to fix bugs or add features. After improving the code you can offer your fork as an improved version back to the orginal repo owners (or `main`/`master` branch). This offer is called a `pull request`.\n\n[Pull Requests from project Pythia](https://foundations.projectpythia.org/foundations/github/github-pull-request.html)\n\n**Merging Back to the Main Branch**\n1. When your work is complete, go to the `Pull Requests tab` at the top of the repository.\n2. Click `New Pull Request` and select your new branch as the source and `main` as the target.\n3. Review the changes and click `Merge` to integrate your branch into the main project.\n\nA step-by-step tutorial is given in the [GitHub documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request). \n\n---\n\n## Make your repository citable\n\n### Citation files help users properly cite your work\n\n### Zenodo offers a DOI for specific software <strong>releases</strong>\n\n---\n\n## Citation file\n\nA `CITATION.cff` file makes citation of your repository easy. The <em>.cff</em> file format is both human- and machine-readable.\n\nAfter you have added a citation file to your repository, GitHub will provide citation options for users in both APA and BibTeX formats.\n\nHere is an example of a citation file ([from here](https://github.com/citation-file-format/citation-file-format)):\n\n```yaml\ncff-version: 1.2.0\nmessage: If you use this software, please cite it using these metadata.\ntitle: My Research Software\nabstract: This is my awesome research software. It does many things.\nauthors:\n  - family-names: Druskat\n    given-names: Stephan\n    orcid: \"https://orcid.org/1234-5678-9101-1121\"\n  - name: \"The Research Software project\"\nversion: 0.11.2\ndate-released: \"2021-07-18\"\nidentifiers:\n  - description: This is the collection of archived snapshots of all versions of My Research Software\n    type: doi\n    value: \"10.5281/zenodo.123456\"\n  - description: This is the archived snapshot of version 0.11.2 of My Research Software\n    type: doi\n    value: \"10.5281/zenodo.123457\"\nlicense: Apache-2.0\nrepository-code: \"https://github.com/citation-file-format/my-research-software\"\n```\n\n[Learn more about citation files from GitHub](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files)\n\n---\n\n## Zenodo\n\nZenodo is most known for data archival. When depositing data with Zenodo, a digital object identifier (DOI) is issued. Creating a persistent reference to the data exactly as they exist at the time of upload and offering an object for citation in scientific publications. Zendo also offers this service for GitHub repositories.\n\nOpen the Zenodo [link](https://zenodo.org/login) and login <strong>with GitHub</strong>. You will need to <em>Authorize Zenodo</em> to access GitHub.\n\n<div><img src=\"https://github.com/LinkedEarth/RLeapFROGS/blob/main/static/module5/zenodo_login.png?raw=true\" alt=\"Zenodo Login\" width=25% align=\"left\"/></div>\n\n---\n\n## Zenodo (continued)\n\nNavigate to Zenodo's [page](https://zenodo.org/account/settings/github/) for managing GitHub and enable archival on the repository.\n\n<div><img src=\"https://github.com/LinkedEarth/RLeapFROGS/blob/main/static/module5/zendo_github_page.png?raw=true\" alt=\"Zenodo GitHub\" width=25% align=\"left\"/></div>\n\n[GitHub tutorial for linking to Zenodo](https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content)\n","fields":{"slug":"/chapter5_03_intermediate_github"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://foundations.projectpythia.org/_images/GitHub-logo.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/> Lesson 4<br>GitHub for Project Management</h1></div>\n\n---\n\nGitHub provides robust project management tools to help organize, track, and complete tasks in your projects. Here’s how to use features like Projects, Milestones, and Issues to streamline your workflow.\n\n---\n\n## Using GitHub Projects\n\nProjects act as [Kanban boards](https://en.wikipedia.org/wiki/Kanban_board) where you can organize tasks into customizable columns (e.g., \"To Do,\" \"In Progress,\" \"Done\").\n\nYou can see an example of a Project board for the Pyleoclim software [here](https://github.com/orgs/LinkedEarth/projects/7/views/1). The following slides give an overview on how to use GitHub projects for your project management. A more complete guide is available [here](https://docs.github.com/en/issues/planning-and-tracking-with-projects).\n\n---\n\n## Why Use GitHub for Project Management?\n\n* Centralizes tasks and project details in one place.\n* Encourages collaboration with team members.\n* Tracks progress and maintains transparency.\n* Integrates seamlessly with version control and repositories.\n\n---\n\n### How to Create a GitHub Project\n\n1. Navigate to your repository.\n2. Click the Projects tab.\n3. Click New Project and choose either Table or Board (Kanban-style).\n4. Name your project and add a description (optional).\n5. Add columns:\n    * Common column titles: \"To Do,\" \"In Progress,\" \"Completed.\" Although not completely necessary, the completed column allows you to keep track of all the issues you have worked on in your project. When you are about to create a release, it is always a good feeling to see how much you have actually accomplished. \n6. Add tasks:\n    * Click + Add a card in a column.\n    * Link it to an Issue or create a standalone card.\n\n---\n\n### Using Projects\n\n* Move cards between columns as tasks progress.\n* Add labels or assignees to tasks for clarity.\n* Track progress with built-in insights and views. \n\n---\n\n## Tracking Progress with Milestones\n\n[Milestones](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/about-milestones) in GitHub are a way to group related tasks (issues and pull requests) under a single goal or deadline. They help track progress toward completing a larger project, such as finishing a research paper, finalizing a dataset, or releasing software. Each milestone includes a title, description, and optional due date, and displays the percentage of tasks completed, making it easy to monitor progress and stay organized.\n\n---\n\n### How to create a Milestone\n\n1. Go to the Issues tab in your repository.\n2. Click Milestones > New Milestone.\n3. Fill in:\n    * Title: e.g., \"Submit Paper Draft\"\n    * Description: Outline the goal.\n    * Due Date: Optional, but helps with deadlines. Due dates are also \n4. Click Create Milestone.\n\n---\n\n### Assign issues to Milestones\n\n1. Open an issue.\n2. In the right-hand sidebar, select the Milestone dropdown.\n3. Choose a milestone to link the issue. Check our [intro to GitHub](https://linked.earth/LeapFROGS/module5) slides on how to create and write a good issue. \n\n---\n\n## Combining Issues, Milestones, and Projects\n\n* Assign issues to milestones for tracking progress toward a larger goal.\n* Add issues to your project board for task management.\n* Use filters in the Issues tab to see:\n* Tasks related to a specific milestone.\n* Tasks assigned to a specific user or label.\n\n---\n\n## Monitoring Progress\n\n* View milestone progress on the Milestones page (e.g., percentage of issues completed).\n* Use GitHub Insights (in repository settings) to see contributor activity and progress.\n* Regularly update your Project Board to reflect task statuses.\n\n---\n\n## Collaborating with teams\n\n* Use the Assignees field in issues or pull requests to assign tasks to team members.\n* Use the Comments section to discuss tasks and share updates.\n* Mention team members with @username to notify them.\n\n---","fields":{"slug":"/chapter5_04_projectmanagement"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://www.applivery.com/wp-content/uploads/2024/07/GitHub-Desktop.png\" alt=\"GitHub Desktop Logo\" width=25% align=\"left\"/> Lesson 6<br>GitHub Desktop</h1></div>\n\n---\n\n## What is GitHub Desktop?\n\n[GitHub Desktop](https://github.com/apps/desktop) is a free, user-friendly application that provides a graphical interface for working with Git and GitHub. It simplifies version control tasks such as committing changes, managing branches, and syncing repositories, making Git more accessible to users who may be unfamiliar with the command-line interface.\n\n---\n\n## Key Features of GitHub Desktop\n\n1. **Ease of Use**: A visual interface makes it easy to perform common Git operations like committing, branching, and merging.\n2. **Repository Management**:Clone repositories, view project history, and push/pull changes with a few clicks.\n3. **Branch Management**: Create, switch, and merge branches easily.\n4. **Conflict Resolution**: Handles merge conflicts with an intuitive UI to guide resolution.\n5. **Cross-Platform**: Available for both macOS and Windows.\n6. **Integration with GitHub**: Seamless connection to your GitHub repositories for managing pull requests, issues, and commits.\n\n---\n\n## Who Should Use GitHub Desktop?\n\n* **Beginners**: Users new to Git and GitHub who want to avoid the command line.\n* **Scientists & Researchers**: Who need to track changes in their projects but prefer a graphical tool.\n* **Developers**: Who want a faster way to perform Git operations locally.\n\n---\n\n## How to Get Started with GitHub Desktop\n\n1. [Download](https://desktop.github.com/download/) and Install  \n2. Set Up GitHub Desktop:\n  * After installation, log in with your GitHub account credentials.\n  * Configure your name and email for commits.\n3. Clone a Repository:\n  * Click File > Clone Repository.\n  * Choose a repository from your GitHub account or enter a repository URL.\n4. Work with Files:\n  * Make changes to your files locally on your computer.\n  * GitHub Desktop will detect the changes automatically.\n5. Commit Changes:\n  * Write a commit message summarizing your changes.\n  * Click Commit to [branch name].\n6. Push Changes to GitHub:\n  * Click Push Origin to upload your changes to the remote repository on GitHub.\n7. Create and Manage Branches:\n  * Click the Current Branch dropdown to create or switch branches.\n  * Merge branches directly in the app.\n\n---\n\n## Why Use GitHub Desktop?\n\n* **Simplifies Git Commands**: No need to memorize Git commands or use the terminal.\n* **User-Friendly interface**: Visual indicators for changes, conflicts, and history.\n* **Better Collaboration**: Easily sync and collaborate with team members.\n* **Conflict Resolution**: Integrated tools for resolving merge conflicts.\n\n---\n\n","fields":{"slug":"/chapter5_06_GitHubDesktop"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://foundations.projectpythia.org/_images/GitHub-logo.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/> Lesson 5<br>Advanced GitHub</h1></div>\n\n---\n\n## Getting started with GitHub Actions\n\n[GitHub Actions](https://github.com/features/actions) is a powerful feature that allows you to automate tasks directly within your GitHub repository. You can use it to automate testing, deployment, or other workflows triggered by events like a code push or a pull request.\n\n---\n\n### What is GitHub Actions?\n\nGitHub Actions allows you to create workflows that automate tasks for your repository. These workflows are written in YAML files and are triggered by specific events (e.g., code commits, issue creation).\n\n---\n\n### Common Use Cases\n\n* ***Continuous Integration (CI)***: Automatically test your code when changes are made. This is particularly useful if you are developing software packages. \n* ***Continuous Deployment (CD)***: Deploy your app or website when updates are pushed. This is useful to automate the creation of Docker containers. \n* ***Automated Workflows***: Tasks like code formatting, notifications, or data processing.\n\n---\n\n### Key Concepts\n\n* ***Workflow***: A collection of automated steps defined in a YAML file.\n* ***Event***: Triggers the workflow (e.g., push, pull_request, schedule).\n* ***Job***: A collection of steps to be executed on a virtual machine.\n* ***Step***: An individual task in a job, like running a script or installing dependencies.\n\n---\n\n## Setting Up a GitHub Actions Workflow\n\n### Step 1: Create the Workflow File\n\n* Navigate to your repository on GitHub.\n* Go to the **Actions** tab.\n* Click **New Workflow** to explore templates or **Set up a workflow yourself** to start from scratch. You never really start from scratch. It is useful to look at examples in other people's repository and emulate their work. \n* This creates a folder `.github/workflows/` and a YAML file for your workflow (e.g., main.yml).\n---\n\n### Step 2: Define the Workflow\n\nHere’s an example of a basic workflow:\n\n```\nname: learn-github-actions\nrun-name: ${{ github.actor }} is learning GitHub Actions\non: [push]\njobs:\n  check-bats-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n      - run: npm install -g bats\n      - run: bats -v\n```\n---\n\n### Step 3: Commit the Workflow File\n\n* Save and commit the workflow file to the `.github/workflows/` directory.\n* The workflow will automatically run based on the specified triggers (e.g., a push to the main branch).\n\n---\n\n### Anatomy of a Workflow File\n\n* `name`: The name of your workflow (e.g., CI Workflow).\n* `on`: The event(s) that trigger the workflow (e.g., push, pull_request, or schedule).\n* `jobs`: The tasks to be performed.\n    * `build`: A job name.\n    * `runs-on`: Specifies the virtual environment (e.g., ubuntu-latest, windows-latest). You can set up multiple workflows to test your code on various platform to make sure it is compatible with various OS. \n    * `steps`: The individual steps to execute:\n    * `uses`: [Predefined GitHub Actions](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/using-pre-written-building-blocks-in-your-workflow) (e.g., actions/checkout@v3).\n    * `run`: Custom shell commands.\n\n---\n\n### Example use cases\n\n* [Run Python Tests](https://github.com/LinkedEarth/Pyleoclim_util/blob/master/.github/workflows/testmaster.yml).\n* [Create a Docker Container](https://github.com/LinkedEarth/Pyleoclim_util/blob/master/.github/workflows/build.yml).\n* [Upload package to Pypi following a GitHub release](https://github.com/LinkedEarth/Pyleoclim_util/blob/master/.github/workflows/publish.yml).\n* [Create a static website](https://github.com/LinkedEarth/LeapFROGS/blob/main/.github/workflows/gatsby-publish.yaml). Yes, we use GitHub actions to deploy the platform you are currently using!\n\n---\n\n## GitHub Secrets\n\nOn the previous examples, you should have seen several examples of `GitHub secrets`. So what are they? GitHub Secrets are encrypted variables that you can use in your workflows to securely store sensitive information like API keys, access tokens, or passwords. These secrets are not exposed in your repository or workflow logs, ensuring the security of your data.\n\n### How to Add Secrets\n1. Go to your repository on GitHub.\n2. Navigate to Settings > Secrets and variables > Actions.\n3. Click New repository secret.\n4. Add a name (e.g., API_KEY) and value (e.g., your actual API key).\n5. Click Add Secret.\n\n---\n### Using Secrets in Workflows\n\nYou can access secrets in your GitHub Actions workflows using the `${{ secrets.<SECRET_NAME> }}` syntax.\n\n**Best Practices:**\n* ***Keep Secrets Descriptive***: Use meaningful names for clarity (e.g., AWS_ACCESS_KEY, DB_PASSWORD).\n* ***Restrict Access***: Use environment-specific secrets to limit access.\n* ***Do Not Hardcode Secrets***: Always store sensitive data in GitHub Secrets, never in your code.\n* ***Regularly Rotate Secrets***: Update secrets periodically to enhance security.\n\nGitHub Secrets make it simple to securely integrate sensitive information into your workflows without risking exposure.\n\n---\n\n## Tips for Writing Workflows\n\n* ***Use Pre-Built Actions***: Explore the [GitHub Actions Marketplace](https://github.com/marketplace?type=actions) for reusable actions.\n* ***Secure Secrets***: Store sensitive data like API keys in Settings > Secrets and variables.\n* ***Debugging***: Use run: echo \"Debug message\" to output debugging information.\n* ***YAML Validation***: Ensure proper YAML indentation to avoid errors. You can use online validators such as [YAML Lint](https://www.yamllint.com), [YAML Checker](https://yamlchecker.com). \n\n---\n\n## Additional Resources\n\n* [GitHub Actions Documentation](https://docs.github.com/en/actions)\n* [Actions Marketplace](https://github.com/marketplace/actions)\n* [Learn GitHub Actions](https://docs.github.com/en/actions/learn-github-actions)\n---","fields":{"slug":"/chapter5_05_Advanced GitHub"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://raw.githubusercontent.com/docker-library/docs/c350af05d3fac7b5c3f6327ac82fe4d990d8729c/docker/logo.png\" alt=\"Docker Logo\" width=25% align=\"left\"/> Lesson 1<br>Docker, Binder, and MyBinder</h1></div>\n\n---\n## Containers\n\n[Docker containers](https://www.docker.com/resources/what-container/) are like lightweight, portable \"mini-computers\" that can run software. They package everything a program needs—like its code, tools, and settings—so it works the same way everywhere, whether on your laptop, a server, or the cloud. Think of it as a way to ship an app and all its ingredients in one tidy box, making it easy to use and consistent across different machines.\n\nThese virual environments can be thought of as a pyramid of requirements that support your workflow. An operating system and its libraries support a coding language and a few specific packages, which in turn support the script you wrote.\n\n---\n\n## Docker\n\nDocker is the software that builds and runs containers. Podman is another, less commonly used, tool for working with containers.\n\nContainers are built from images. Images are built from Dockerfiles or GitHub Actions (amoungst other options).\n\n---\n\n## Building a container image\n\nA container image is typically built from a base image. For example, to run an R script that requires ggplot2 and dplyr one could pull:\n\n* an Ubuntu image and install R, then install ggplot2 and dplyr\n* a rocker image, which already contains Ubuntu and R, then install ggplot2 and dplyr\n* the rocker/tidyverse image, which contains all the requirements to run your code\n\nWe will talk more about building containers in the next exercise. But, we can also automate the building on a container image through GitHub, using `Binder`.\n\n---\n\n## Binder\n\n\nBinder is a set of tools that let you run code and explore projects directly in your web browser without needing to install anything on your computer. It takes the code and its required software setup (like libraries and dependencies) and creates a temporary, ready-to-use environment for you. It's like clicking a link to instantly open a working lab where you can test and play with code—perfect for sharing and collaborating on projects.\n\n---\n\n## Binder (cont.)\n\nBinder requires a only a few tweaks to your repository to get started. You will need to define the language, language version, and the packages used (and their versions for some languages). Together, this is called the environment.\n\nWe will deploy the suite of Binder tools `myBinder` a free cloud resource.\n\n---\n\n## MyBinder\n\nThe relationship between Binder and [BindHub](https://github.com/jupyterhub/binderhub) is analagous to that of Git and GitHub, wherein the _Hub wraps the tools in a nifty user interface. [MyBinder](https://mybinder.org/) is a widely used, free instance on BinderHub.\n\nMyBinder is a Binder UI and cloud resource that hosts containers. The platform allows users to share scripts in online IDEs (eg. Rstudio), interactive notebooks, (eg. Jupyter), and web apps (eg. Shiny).\n\n---\n\n## Getting started\n\nYou will learn more about implementing Binder in your repo in the last exercise.\n","fields":{"slug":"/chapter6_01_docker,_binder"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://raw.githubusercontent.com/docker-library/docs/c350af05d3fac7b5c3f6327ac82fe4d990d8729c/docker/logo.png\" alt=\"Docker Logo\" width=25% align=\"left\"/> Lesson 3<br>Overview of Container Repositories for Geoscientists</h1></div>\n\n---\n\n## What is a Container Repository?\n\n* **Reproducibility**: By sharing your container in a repository, others can easily replicate your work by running the exact same environment.\n* **Collaboration**: Collaborators and peers can pull your container, ensuring consistency in software and dependencies.\n* **Convenience**: Instead of sending bulky files or detailed setup instructions, you share a link to your container. You may also include some basic instructions on how to run it. \n\n---\n\n## Key Repositories: DockerHub and Quay.io\n\n### [DockerHub](https://www.docker.com/products/docker-hub/)\n\n* **What It Is**: The most widely used container repository. It's integrated with Docker and offers public and private repositories.\n* **Why Use It**:\n  * Easy to share containers with collaborators.\n  * Built-in search for popular scientific tools or pre-built containers.\n  * Free tier available for public repositories.\n* **How It Works**:\n  * ***Push***: Once you've built a container, upload (push) it to DockerHub.\n  * ***Pull***: Collaborators or users download (pull) the container to use on their systems.\n\n---\n\n### [Quay.io](https://quay.io)\n\n* **What It Is**: Another container repository, popular in academic and open-source communities.  \n* **Why Use It**:\n  * More robust options for image security and scanning.\n  * Often preferred for high-performance computing (HPC) and large-scale workflows.\n* **How It Works**:\n  * Similar to DockerHub, you can push and pull containers.\n  * Enhanced metadata and security tools for managing container versions.\n\n---\n\n### When to Use Which?\n\n1. **DockerHub**: If you're just starting or want a simple, widely supported platform for public sharing.\n2. **Quay.io**: If your research involves sensitive data, requires more security, or integrates with advanced tools. It also offers more free options\n\n---\n\n## Examples in Geoscience\n\n* **Reproducible Workflows**: Publish a container with the exact versions of Python, R, and climate modeling libraries.\n* **Collaborative Projects**: Share a container for a specific analysis, ensuring that collaborators on different systems use the same tools.\n* **Educational Modules**: Use containers for teaching geoscience students to run complex workflows without needing to install software.\n\n\n","fields":{"slug":"/chapter6_03_ContainerRepo"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://mybinder.org/static/logo.svg?v=fe52c40adc69454ba7536393f76ebd715e5fb75f5feafe16a27c47483eabf3311c14ed9fda905c49915d6dbf369ae68fb855a40dd05489a7b9542a9ee532e92b\" alt=\"binder Logo\" width=25% align=\"left\"/> Lesson 5<br>Binder and MyBinder</h1></div>\n\n---\n\n## MyBinder for R\n\nMyBinder can host servers based on R environemnts, offering an R console or an instance of RStudio online. There are multiple ways to create a container image compatible with MyBinder. We will address two paths.\n\n---\n\n## Reproducing your environment on mybinder.org\n\nMyBinder and Binder itself are built for Python but also support R. At this time there are multiple pathways to configure your R code repository to run on MyBinder. We recommend starting with a template from GitHub following one of these paths:\n\n1. rocker (preferred)\n2. r-conda\n\n---\n\n### rocker pathway\n\nThe rocker pathway offers more available packages (anything on CRAN), more flexibility (your choice of package versions), and ensures reproduciblity for local R use. You will simply provide the the renv.lock file containing the R and package version information.\n\nSee a more detailed explanation [here](https://github.com/rocker-org/binder/)\n\nHere is a working [example](https://github.com/DaveEdge1/Devils_Hole2)\n\nHere is a template [example](https://github.com/DaveEdge1/Devils_Hole2)\n\n---\n\n### r-conda pathway\n\nIn this alternative setup, Binder uses an `environment.yml` file to build your R environment. The advantage of this pathway is reliability in the Binder context - as the pathway is built on Python and conda.\n\nSee an example [here](https://github.com/binder-examples/r-conda)\n\nAdd Binder stuff from Deborah's LeapFROGS\n\n## Linking the Repository to myBinder\n\n1. Go to [myBinder.org](https://mybinder.org).\n2. Enter your GitHub repository URL.\n3. Set the branch to main (or the relevant branch name).\n4. Click Launch. myBinder will build your environment and provide a link for sharing.\n\n<div><h1><img src=\"https://github.com/LinkedEarth/LeapFROGS/blob/main/static/module6/myBinder.png?raw=true\" alt=\"myBinder\" width=50% align=\"center\"/></h1></div>\n\n---\n\n## Creating a myBinder Badge\n\nTo allow others to easily launch your environment, add a myBinder badge to your repository’s README.md.\n\n`[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/username/repository/main)`\n\nReplace `username` and `repository` with your **GitHub username** and **repository name**.\n\n---","fields":{"slug":"/chapter6_06_Binder_and_myBinder"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://raw.githubusercontent.com/docker-library/docs/c350af05d3fac7b5c3f6327ac82fe4d990d8729c/docker/logo.png\" alt=\"Docker Logo\" width=25% align=\"left\"/> Lesson 5<br>Creating Containers</h1></div>\n\n---\n\n## Dockerfile\n\n\nA Dockerfile is a plain text script with instructions to build a Docker image, automating the setup of a consistent and portable environment for applications. All Dockerfiles define a base image from which to start. Upon the base image, files and dependencies are commonly added. Finally, the main process (or Entrypoint) is defined.\n\nWe will focus on building containers from GitHub. To gain more granular access you will want to read the full documentation for building with Dockerfiles [here](https://docs.docker.com/get-started/docker-concepts/building-images/).\n\n---\n\n## Creating Containers with GitHub Actions\n\n### Why use GitHub actions?\n\n* GitHub Actions automates workflows directly from your GitHub repository.\n* It can automatically build and push containers to repositories like DockerHub or Quay.io whenever you update your project.\n\n---\n\n### Key Steps\n\n1. Prepare Your Repository\n\nEnsure your repository includes:\n\n* Code or scripts: Your analysis or workflow files.\n* Environment file (e.g., environment.yml): Lists dependencies for the container.\n\n---\n\n2. Set Up a GitHub Actions Workflow\n\n* **Create the Workflow File**: Add a YAML file in `.github/workflows/`, for example, `build-container.yml`.\n* Example Workflow: [Here](https://github.com/LinkedEarth/LeapFROGS/blob/main/static/module6/build-container.yml)’s a minimal GitHub Actions workflow to create a container using the environment.yml file. \n\nHave a look at the file and click on the next slide to learn more about some of the key features. \n\n---\n\n### Key features\n\n1. Repository Integration: \n  * Automatically builds and pushes a container image to Quay.io whenever changes are pushed to the main branch.\n  * Seamlessly integrates with GitHub, ensuring your environment stays up-to-date with your codebase.\n2. Environment-First Workflow:\n  * Uses the `environment.yml` file\n3. Secure Authentication:\n  * Leverages [GitHub Secrets](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions) for securely storing and using Quay.io credentials (`QUAY_USERNAME` and `QUAY_PASSWORD`).\n4. Pushes to Quay.io:\n  * Automatically uploads the container image to your Quay.io repository with a customizable tag (e.g., `quay.io/<username>/my-geoscience-env:latest`).\n5. Scalability:\n  * Supports versioned containers by modifying the :latest tag (e.g., :v1.0.0).\n  * Works with private and public repositories in Quay.io, catering to secure or open science projects.\n6. Reproducibility:\n  * By exporting and using the `environment.yml` file, collaborators can precisely reproduce your computational environment.\n\n---\n\n### Why This is Useful for Geoscientists\n\n* Focuses on reproducible science without requiring deep technical knowledge of Docker.\n* Makes sharing and collaboration on scientific workflows seamless.\n* Ensures that complex dependencies (e.g., geoscience libraries) are bundled for consistent analysis across systems.\n\n---\n\n## What are GitHub secrets?\n\n[GitHub Secrets](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions) are a secure way to store sensitive information (e.g., passwords, API tokens, or access credentials) in your GitHub repository. They are encrypted and only accessible by workflows running in your repository.\n\n### Why Use Them?\n* **Security**: Secrets prevent sensitive data from being exposed in your code or workflow files.\n* **Automation**: They allow workflows to authenticate with external services (e.g., DockerHub, Quay.io) securely.\n\n---\n\n### How to Set Up GitHub Secrets\n\n1. Go to your GitHub repository.\n2. Navigate to **Settings > Secrets and variables** and **Actions**.\n3. Click `New repository secret`.\n4. Enter a name (e.g., `QUAY_USERNAME`) and the secret value.\n5. Save the secret.\n\n---\n\n### Using Secrets in Workflows\n\nYou can reference secrets in your GitHub Actions workflow like this:\n\n```\nwith:\n  username: ${{ secrets.QUAY_USERNAME }}\n  password: ${{ secrets.QUAY_PASSWORD }}\n```\n\n","fields":{"slug":"/chapter6_05_CreatingContainer"}}}]}}}